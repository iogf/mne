#! /usr/bin/env python2

from os.path import join, expanduser
from datetime import datetime
from random import randint
from libmne import Mne
from libdae import Daemon
from subprocess import call
import argparse
import time

class App(Daemon):
    def __init__(self, bg, fg):
        Daemon.__init__(self, join(expanduser('~'), 'mne.pid'))

        # Whenever attempts to stop the daemon
        # before instantiating Mne class.
        self.stop()
        filename = join(expanduser('~'), '.mne')
        self.mne = Mne(filename, self.show)
        self.bg  = bg
        self.fg  = fg

    def run(self):        
        while True:
            time.sleep(5)
            self.mne.process()

    def show(self, msg, time):
        cmd = 'echo %s | dzen2 -p -bg %s -fg %s -l 3' % (msg, self.bg, self.fg)
        call(cmd, shell=True)

def build(years, months, days, hours, minutes):
    if not months: 
        months = xrange(1, 12)
    if not days:
        days = xrange(1, 30)
    if not hours:
        hours = xrange(1, 24)
    if not minutes:
        minutes = xrange(1, 60)
    return years, months, days, hours, minutes

if __name__ == '__main__':
    today  = datetime.today()
    parser = argparse.ArgumentParser()
    parser.add_argument('msg', nargs='?', help='Messages')
    parser.add_argument('-y', '--years', default=[today.year], nargs='*', help='years')
    parser.add_argument('-m', '--months', default=[today.month], nargs='*', help='months')
    parser.add_argument('-d', '--days', default=[today.day], nargs='*', help='days')
    parser.add_argument('-u', '--hours', default=[today.hour], nargs='*', help='hours')
    parser.add_argument('-i', '--minutes', default=[today.minute], nargs='*', help='hours')
    parser.add_argument('--bg', default='yellow', help='Background color.')
    parser.add_argument('--fg', default='black', help='Foreground color.')

    args = parser.parse_args()
    app  = App(args.bg, args.fg)
    app.mne.add(args.msg, 
            *build(args.years, args.months, args.days,
                    args.hours, args.minutes))
    app.start()


